<?php

/**
 * @file
 * Update Hooks.
 */

use Drupal\field\Entity\FieldStorageConfig;

/**
 * Updates Media file size field storage for larger files.
 */
function islandora_core_feature_update_8001() {

  $entity_type = 'media';
  $field_name = 'field_file_size';

  $database = \Drupal::database();
  $tables = [
    "{$entity_type}__{$field_name}",
    "{$entity_type}_revision__{$field_name}",
  ];

  foreach ($tables as $table) {

    // Squirrel away the data.
    $table_file_path = "public://islandora_core_feature_update_8001_{$table}.json";
    if (!file_exists($table_file_path)) {
      $table_data = $database->select($table, 'n')->fields('n')->execute()->fetchAll();
      \Drupal::service('file_system')->saveData(json_encode($table_data), $table_file_path);
    }

    // Clean it out for resizing.
    $database->truncate($table)->execute();

    $database->schema()->changeField($table, $field_name . '_value', $field_name . '_value', [
      'type' => 'int',
      'size' => 'big',
      'unsigned' => TRUE,
      'not null' => TRUE,
    ]);

  }

  // Update field storage configuration.
  $config = \Drupal::configFactory()
    ->getEditable("field.storage.{$entity_type}.{$field_name}");
  $config->set('settings.size', 'big');
  $config->set('settings.unsigned', TRUE);
  $config->save(TRUE);

  // Make sure the new config persists.
  FieldStorageConfig::loadByName($entity_type, $field_name)->save();

  // Reload the data.
  foreach ($tables as $table) {
    $table_file_path = "public://islandora_core_feature_update_8001_{$table}.json";
    if (file_exists($table_file_path)) {
      foreach (json_decode(file_get_contents($table_file_path), TRUE) as $row) {
        $database->insert($table)
          ->fields((array) $row)
          ->execute();
      }
      // Clean up.
      \Drupal::service('file_system')->delete($table_file_path);
    }

  }

  return t('Length of @entity-type.@field-name updated to an unsigned big int', [
    '@entity-type' => $entity_type,
    '@field-name' => $field_name,
  ]);
}
